# Azure Container Instances - CI/CD Pipeline
# このワークフローは Bicep テンプレートの検証とデプロイを自動化します

name: ACI Deployment Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'templates/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'templates/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'デプロイ環境'
        required: true
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
      template_type:
        description: 'テンプレートタイプ'
        required: true
        default: 'aci-simple'
        type: choice
        options:
        - aci-simple
        - aci-with-volumes

env:
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}

jobs:
  # Bicep テンプレートの検証
  validate:
    name: 🔍 Bicep テンプレート検証
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4
      
    - name: 🔐 Azure ログイン
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 🧪 Bicep ファイルの構文チェック
      run: |
        echo "🔍 Bicep テンプレートの構文をチェックしています..."
        
        # シンプル ACI テンプレートの検証
        echo "📋 aci-simple テンプレートを検証中..."
        az bicep build --file ./templates/aci-simple/main.bicep --outfile ./templates/aci-simple/main.json
        
        # ボリューム付き ACI テンプレートの検証
        echo "📋 aci-with-volumes テンプレートを検証中..."
        az bicep build --file ./templates/aci-with-volumes/main.bicep --outfile ./templates/aci-with-volumes/main.json
        
        echo "✅ すべてのテンプレートの構文チェックが完了しました"
        
    - name: 🎯 テンプレート What-If 分析
      run: |
        echo "🔮 What-If 分析を実行中..."
        
        # テスト用リソースグループの作成
        TEST_RG="rg-aci-test-$(date +%s)"
        echo "📂 テスト用リソースグループを作成: $TEST_RG"
        az group create --name "$TEST_RG" --location "japaneast"
        
        # シンプル ACI の What-If
        echo "🔍 aci-simple の What-If 分析..."
        az deployment group what-if \
          --resource-group "$TEST_RG" \
          --template-file ./templates/aci-simple/main.bicep \
          --parameters ./templates/aci-simple/main.parameters.json \
          --parameters containerGroupName="test-aci-simple"
          
        # ボリューム付き ACI の What-If
        echo "🔍 aci-with-volumes の What-If 分析..."
        az deployment group what-if \
          --resource-group "$TEST_RG" \
          --template-file ./templates/aci-with-volumes/main.bicep \
          --parameters ./templates/aci-with-volumes/main.parameters.json \
          --parameters containerGroupName="test-aci-volumes"
          
        # テスト用リソースグループの削除
        echo "🧹 テスト用リソースグループを削除: $TEST_RG"
        az group delete --name "$TEST_RG" --yes --no-wait
        
    - name: 📊 アーティファクトのアップロード
      uses: actions/upload-artifact@v4
      with:
        name: bicep-templates
        path: |
          ./templates/
          ./catalog.yaml
          ./environment-definition.yaml
        retention-days: 30

  # セキュリティ・品質チェック
  security-scan:
    name: 🔒 セキュリティスキャン
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4
      
    - name: 🛡️ Bicep セキュリティスキャン
      run: |
        echo "🔍 Bicep テンプレートのセキュリティスキャンを実行中..."
        
        # PSRule for Azure を使用したセキュリティチェック
        npm install -g @microsoft/azure-rules
        
        # セキュリティルールの実行
        echo "📋 セキュリティルールを適用中..."
        
        # カスタムセキュリティチェック
        echo "🔍 カスタムセキュリティチェックを実行中..."
        
        # 機密情報のハードコーディングチェック
        if grep -r "password\|secret\|key" ./templates/ --include="*.bicep" --include="*.json"; then
          echo "⚠️ 機密情報がハードコーディングされている可能性があります"
          exit 1
        else
          echo "✅ 機密情報のハードコーディングは検出されませんでした"
        fi
        
        # パブリックアクセスのチェック
        if grep -r "\"type\": \"Public\"" ./templates/ --include="*.bicep" --include="*.json"; then
          echo "⚠️ パブリックアクセスが設定されています（開発環境では問題ありませんが、本番環境では確認してください）"
        fi
        
        echo "✅ セキュリティスキャンが完了しました"

  # 開発環境への自動デプロイ
  deploy-dev:
    name: 🚀 開発環境デプロイ
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    environment: development
    
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4
      
    - name: 🔐 Azure ログイン
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 📂 リソースグループ作成
      run: |
        RG_NAME="rg-aci-dev-${{ github.run_number }}"
        echo "RESOURCE_GROUP=$RG_NAME" >> $GITHUB_ENV
        
        echo "📂 開発環境用リソースグループを作成: $RG_NAME"
        az group create --name "$RG_NAME" --location "japaneast"
        
    - name: 🎯 テンプレートデプロイ
      run: |
        TEMPLATE_TYPE="${{ github.event.inputs.template_type || 'aci-simple' }}"
        CONTAINER_NAME="aci-dev-${{ github.run_number }}"
        
        echo "🚀 $TEMPLATE_TYPE テンプレートをデプロイ中..."
        
        az deployment group create \
          --resource-group "$RESOURCE_GROUP" \
          --name "aci-deployment-${{ github.run_number }}" \
          --template-file "./templates/$TEMPLATE_TYPE/main.bicep" \
          --parameters "./templates/$TEMPLATE_TYPE/main.parameters.json" \
          --parameters containerGroupName="$CONTAINER_NAME" environmentName="development"
          
    - name: 📊 デプロイ結果の取得
      run: |
        echo "📊 デプロイ結果を取得中..."
        
        DEPLOYMENT_NAME="aci-deployment-${{ github.run_number }}"
        
        # アウトプットの取得
        FQDN=$(az deployment group show --resource-group "$RESOURCE_GROUP" --name "$DEPLOYMENT_NAME" --query properties.outputs.fqdn.value -o tsv)
        URL=$(az deployment group show --resource-group "$RESOURCE_GROUP" --name "$DEPLOYMENT_NAME" --query properties.outputs.url.value -o tsv)
        
        echo "🌐 FQDN: $FQDN"
        echo "🔗 URL: $URL"
        
        # GitHub Environment に変数を設定
        echo "DEPLOYMENT_URL=$URL" >> $GITHUB_ENV
        echo "DEPLOYMENT_FQDN=$FQDN" >> $GITHUB_ENV
        
    - name: 🧪 デプロイメントテスト
      run: |
        echo "🧪 デプロイされたアプリケーションをテスト中..."
        
        # エンドポイントの疎通確認（最大5分間リトライ）
        for i in {1..30}; do
          if curl -f "$DEPLOYMENT_URL" > /dev/null 2>&1; then
            echo "✅ アプリケーションが正常に起動しました: $DEPLOYMENT_URL"
            break
          else
            echo "⏳ アプリケーションの起動を待機中... ($i/30)"
            sleep 10
          fi
        done
        
    - name: 💬 Slack 通知
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployment'
        text: |
          ACI デプロイメント ${{ job.status }}
          Environment: Development
          URL: ${{ env.DEPLOYMENT_URL }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 本番環境への手動デプロイ
  deploy-prod:
    name: 🏭 本番環境デプロイ
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'workflow_dispatch'
    environment: production
    
    steps:
    - name: 📥 チェックアウト
      uses: actions/checkout@v4
      
    - name: 🔐 Azure ログイン
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 📂 本番環境リソースグループ確認
      run: |
        PROD_RG="rg-aci-prod"
        echo "RESOURCE_GROUP=$PROD_RG" >> $GITHUB_ENV
        
        echo "📂 本番環境リソースグループを確認: $PROD_RG"
        if ! az group show --name "$PROD_RG" > /dev/null 2>&1; then
          echo "📝 本番環境リソースグループを作成: $PROD_RG"
          az group create --name "$PROD_RG" --location "japaneast"
        else
          echo "✅ 本番環境リソースグループが既に存在します"
        fi
        
    - name: 🔍 本番デプロイ前確認
      run: |
        TEMPLATE_TYPE="${{ github.event.inputs.template_type || 'aci-with-volumes' }}"
        CONTAINER_NAME="aci-prod"
        
        echo "🔍 本番環境デプロイの What-If 分析..."
        
        az deployment group what-if \
          --resource-group "$RESOURCE_GROUP" \
          --template-file "./templates/$TEMPLATE_TYPE/main.bicep" \
          --parameters "./templates/$TEMPLATE_TYPE/main.parameters.json" \
          --parameters containerGroupName="$CONTAINER_NAME" environmentName="production"
          
    - name: 🚀 本番環境デプロイ
      run: |
        TEMPLATE_TYPE="${{ github.event.inputs.template_type || 'aci-with-volumes' }}"
        CONTAINER_NAME="aci-prod"
        
        echo "🏭 本番環境に $TEMPLATE_TYPE をデプロイ中..."
        
        az deployment group create \
          --resource-group "$RESOURCE_GROUP" \
          --name "aci-prod-deployment-${{ github.run_number }}" \
          --template-file "./templates/$TEMPLATE_TYPE/main.bicep" \
          --parameters "./templates/$TEMPLATE_TYPE/main.parameters.json" \
          --parameters containerGroupName="$CONTAINER_NAME" environmentName="production"
          
    - name: 📊 本番デプロイ結果
      run: |
        echo "📊 本番デプロイ結果を取得中..."
        
        DEPLOYMENT_NAME="aci-prod-deployment-${{ github.run_number }}"
        
        FQDN=$(az deployment group show --resource-group "$RESOURCE_GROUP" --name "$DEPLOYMENT_NAME" --query properties.outputs.fqdn.value -o tsv)
        URL=$(az deployment group show --resource-group "$RESOURCE_GROUP" --name "$DEPLOYMENT_NAME" --query properties.outputs.url.value -o tsv)
        
        echo "🏭 本番環境 FQDN: $FQDN"
        echo "🔗 本番環境 URL: $URL"
        
    - name: 📧 本番デプロイ通知
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production-alerts'
        text: |
          🏭 本番環境 ACI デプロイメント ${{ job.status }}
          Environment: Production
          Template: ${{ github.event.inputs.template_type }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Deployed by: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # クリーンアップジョブ（開発環境のみ）
  cleanup-dev:
    name: 🧹 開発環境クリーンアップ
    runs-on: ubuntu-latest
    needs: [deploy-dev]
    if: always() && github.ref == 'refs/heads/develop'
    
    steps:
    - name: 🔐 Azure ログイン
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: 🧹 古いリソースグループの削除
      run: |
        echo "🧹 7日以上古い開発環境リソースグループを削除中..."
        
        # 7日前の日付を計算
        CUTOFF_DATE=$(date -d '7 days ago' +%Y-%m-%d)
        
        # 開発環境のリソースグループを検索して削除
        az group list --query "[?starts_with(name, 'rg-aci-dev-') && properties.provisioningState == 'Succeeded']" -o tsv --query "[].name" | while read rg_name; do
          # リソースグループの作成日を取得
          CREATION_DATE=$(az group show --name "$rg_name" --query "tags.createdDate" -o tsv)
          
          if [[ -z "$CREATION_DATE" ]]; then
            # タグがない場合は削除対象とする
            echo "🗑️ タグのないリソースグループを削除: $rg_name"
            az group delete --name "$rg_name" --yes --no-wait
          elif [[ "$CREATION_DATE" < "$CUTOFF_DATE" ]]; then
            echo "🗑️ 古いリソースグループを削除: $rg_name (作成日: $CREATION_DATE)"
            az group delete --name "$rg_name" --yes --no-wait
          fi
        done
        
        echo "✅ クリーンアップが完了しました"
